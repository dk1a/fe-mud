use std::evm
// panics if these are not imported
use std::buf::{MemoryBuffer, MemoryBufferReader, MemoryBufferWriter}
use store::{Store, StoreAccessor}

// enum SchemaType {
//     U8(u8)
//     U16(u16)
//     // no arrays with complex types (db flattening)
//     // column types must be primitive types or arrays of primitive types

//     pub fn len(self) -> u256 {
//         match self {
//             SchemaType::U8(_) => { return 1 }
//             SchemaType::U16(_) => { return 2 }
//         }
//     }
// }

// struct Schema {
//     field_types: Array<>

//     // max size should be 28
//     pub fn new(field_types: Array<SchemaType, 2>) -> Self {
//         revert
//     }
// }

struct Table {
    accessor: StoreAccessor

    pub fn new(accessor: StoreAccessor) -> Self {
        return Table(accessor)
    }

    pub fn get<T: StoreEncode>(
        self, 
        table_id: u256, 
        key: u256, 
        mut value: T
    ) {
        let buf: MemoryBuffer = self.accessor.read_buf(
            table_id, 
            key, 
            len: value.encode_len()
        )
        let mut reader: MemoryBufferReader = buf.reader()
        value.store_decode(reader)
    }


    pub fn put<T: StoreEncode>(
        self, 
        table_id: u256, 
        key: u256, 
        value: T
    ) {
        let mut buf: MemoryBuffer = MemoryBuffer::new(len: value.encode_len())
        let mut writer: MemoryBufferWriter = buf.writer()
        value.store_encode(writer)
        self.accessor.write_buf(table_id, key, value: buf)
    }
}

struct U256Wrapper {
    pub inner: u256

    pub fn new(inner: u256) -> Self {
        return U256Wrapper(inner)
    }
}

trait StoreEncode {
    fn encode_len(self) -> u256;
    fn store_encode(self, mut writer: MemoryBufferWriter);
    fn store_decode(self, mut reader: MemoryBufferReader);
}

impl StoreEncode for U256Wrapper {
    fn encode_len(self) -> u256 {
        return 32
    }

    fn store_encode(self, mut writer: MemoryBufferWriter) {
        writer.write(value: self.inner)
    }

    fn store_decode(mut self, mut reader: MemoryBufferReader) {
        self.inner = reader.read_u256()
    }
}

#test
fn test_table(mut ctx: Context) {
    let addr: address = address(Store.create(ctx, 0))
    let accessor: StoreAccessor = StoreAccessor::new(addr)
    let table: Table = Table::new(accessor)

    let table_id: u256 = 42
    let key: u256 = 26

    table.put(table_id, key, value: U256Wrapper::new(inner: 100))

    let mut decoded_value: U256Wrapper = U256Wrapper::new(inner: 0)
    table.get(table_id, key, value: decoded_value)
    assert decoded_value.inner == 100
}

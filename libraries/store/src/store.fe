use std::evm
use std::buf::{
    MemoryBuffer, 
    RawCallBuffer,
    MemoryBufferWriter,
    MemoryBufferReader
}

pub contract Store {
    // Simple binary interface for reading and writing to contract state.
    // 
    // For reads, the interface is defined as:
    //
    // input: selector (32 bytes), return size(32 bytes), key (dynamic)
    // output: value (dynamic) 
    //
    // note: return length represents the number of slots (32 bytes each)
    //
    // For writes, the interface is defined as:
    // 
    // input: selector (32 bytes), key length (32 bytes), key (dynamic), value (dynamic)
    // output: none
    //
    // todos: 
    //  - change selector to a single byte
    pub unsafe fn __call__() {
        // 0 for read; 1 for write
        let selector: u256 = evm::call_data_load(offset: 0)

        if selector == 0 {
            // grab the return length
            let value_len: u256 = evm::call_data_load(offset: 32) 
            // calculate the key length from the calldata size
            let key_len: u256 = evm::call_data_size() - 64
            // copy the key from calldata to memory
            let mut key_buf: MemoryBuffer = MemoryBuffer::new(len: key_len)
            evm::call_data_copy(buf: key_buf, from_offset: 64)
            // hash the key and get the value from the storage slot
            let slot_offset: u256 = std::precompiles::sha2_256(buf: key_buf)

            // create the return buffer and write each slot to it 
            let mut return_buf: MemoryBuffer = MemoryBuffer::new(len: value_len * 32)
            let mut return_writer: MemoryBufferWriter = return_buf.writer()
            
            let mut cur_slot: u256 = 0
            while cur_slot < value_len {
                // load the slot value and write it to the buffer
                return_writer.write(value: evm::sload(offset: slot_offset + cur_slot))
                cur_slot += 1
            }

            evm::return_mem(buf: return_buf)
        } else if selector  == 1 {
            // grab the key length
            let key_len: u256 = evm::call_data_load(offset: 32)
            // copy the key into a buffer and compute the slot offset 
            let mut key_buf: MemoryBuffer = MemoryBuffer::new(len: key_len)
            evm::call_data_copy(buf: key_buf, from_offset: 64)
            let slot_offset: u256 = std::precompiles::sha2_256(buf: key_buf)

            // value length must be a multiple of 32
            let value_len: u256 = (evm::call_data_size() - 64 - key_len) / 32

            let mut cur_slot: u256 = 0
            while cur_slot < value_len {
                // load the slot value and write it to storage 
                let sto_offset: u256 = slot_offset + cur_slot
                let call_data_offset: u256 = 64 + key_len + cur_slot * 32
                evm::sstore(offset: sto_offset, value: evm::call_data_load(offset: call_data_offset))
                cur_slot += 1
            }
        }
    }
}

pub struct StoreAccessor {
    addr: address

    pub fn new(addr: address) -> Self {
        return StoreAccessor(addr)
    }

    pub fn read(self, key: u256) -> u256 {
        let mut buf: RawCallBuffer = RawCallBuffer::new(input_len: 96, output_len: 32)

        let mut writer: MemoryBufferWriter = buf.writer()
        let mut reader: MemoryBufferReader = buf.reader()

        writer.write(value: 0) // read selector
        writer.write(value: 1) // value length in number of words (32 bytes)
        writer.write(value: key)

        unsafe { 
            assert evm::call(gas: evm::gas_remaining(), addr: self.addr, value: 0, buf) 
        }

        return reader.read_u256()
    }

    pub fn write(self, key: u256, value: u256) {
        let mut buf: RawCallBuffer = RawCallBuffer::new(input_len: 128, output_len: 0)

        let mut writer: MemoryBufferWriter = buf.writer()
        writer.write(value: 1) // write selector
        writer.write(value: 32) // 32 byte key
        writer.write(value: key)
        writer.write(value)

        unsafe { 
            assert evm::call(gas: evm::gas_remaining(), addr: self.addr, value: 0, buf) 
        }
    }

    pub fn read_buf(
        self, 
        table_id: u256, 
        key: u256,
        len: u256
    ) -> MemoryBuffer {
        let mut buf: RawCallBuffer = RawCallBuffer::new(input_len: 128, output_len: len)

        let mut writer: MemoryBufferWriter = buf.writer()
        let mut reader: MemoryBufferReader = buf.reader()

        writer.write(value: 0) // read selector
        writer.write(value: len / 32) // value length in number of words (32 bytes)
        writer.write(value: table_id)
        writer.write(value: key)

        unsafe { 
            assert evm::call(gas: evm::gas_remaining(), addr: self.addr, value: 0, buf) 
        }

        return reader.read_buf(len)
    }


    pub fn write_buf(self,
        table_id: u256, 
        key: u256,
        value: MemoryBuffer
    ) {
        let mut buf: RawCallBuffer = RawCallBuffer::new(input_len: 128 + value.len(), output_len: 0)

        let mut writer: MemoryBufferWriter = buf.writer()
        writer.write(value: 1) // write selector
        writer.write(value: 64) // key length
        writer.write(value: table_id)
        writer.write(value: key) // 128 
        writer.write_buf(buf: value) // 128 + buf.len()

        unsafe { 
            assert evm::call(gas: evm::gas_remaining(), addr: self.addr, value: 0, buf) 
        }
    }

}

#test
fn test_store_rw(mut ctx: Context) {
    let addr: address = address(Store.create(ctx, 0))
    let accessor: StoreAccessor = StoreAccessor::new(addr)

    assert accessor.read(key: 42) == 0
    accessor.write(key: 42, value: 23)
    assert accessor.read(key: 42) == 23
}

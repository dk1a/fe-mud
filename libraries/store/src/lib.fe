use std::evm

// enum SchemaType {
//     U8(u8)
//     U16(u16)
//     // no arrays with complex types (db flattening)
//     // column types must be primitive types or arrays of primitive types

//     pub fn len(self) -> u256 {
//         match self {
//             SchemaType::U8(_) => { return 1 }
//             SchemaType::U16(_) => { return 2 }
//         }
//     }
// }

// struct Schema {
//     field_types: Array<>

//     // max size should be 28
//     pub fn new(field_types: Array<SchemaType, 2>) -> Self {
//         revert
//     }
// }

// // there are two store modes
// // - RW external contract state
// // - RW internal contract state
// enum TableClient {
//     Internal
//     External(address)
//     // compile-time
//     // - all table schemas should be known by store at compile-time

//     // runtime
//     // - based on the table id and item key we can retreive the value

//     // todo: we also need to add more granular data modifaction methods
//     pub fn get(self, table_id: u256, key: Array<u256, 8>) -> Array<SchemaType, 2> {
//         // todo try to implement this
//         revert
//     }

//     pub fn put(self, table_id: u256, key: Array<u256, 8>, value: SchemaType) {
//         // todo try to implement this
//         // evm::sstore(addr, value)
//         revert
//     }
// }

// trait StoreEncode {
//     fn encode(self) -> MemoryBuffer;
//     fn decode(buf: MemoryBuffer) -> Self;
// }

// {
//     let reader = 
//     let my_value_of_type = MyTypeImplMudDecode::mud_decode(reader)
// }

// struct StoreReader {
//     start: u256
//     cur: u256
// }

// struct StoreWriter {
//     start: u256
//     cur: u256
// }

// trait MudEncode {
//     fn mud_encode(self, writer: StoreWriter)
// }

// impl MudEncode for u256 {
//     fn mud_encode(self, writer: StoreWriter) {
//         writer.writer(self)
//     }
// }

// struct Store {
//     pub fn read<T: MudDecode>() {

//     }
// }

// #test
// fn simple_example() {
//     let position_schema: Schema = Schema::new(field_types: [SchemaType::U8(0), SchemaType::U8(0)])
// }